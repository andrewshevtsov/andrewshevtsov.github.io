{"version":3,"sources":["ListItem.js","App.js","registerServiceWorker.js","index.js"],"names":["ListItem","props","className","employer","logo_urls","src","alt","name","salary","from","to","address","city","App","state","data","items","isListLoading","page","onListScroll","e","SCROLLDIV","currentTarget","console","log","clientHeight","scrollHeight","scrollTop","getDataFromAPI","setState","fetch","then","res","json","result","concat","catch","err","error","alert","this","onScroll","map","item","key","id","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.da1ddd80.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst ListItem = (props) => {\r\n    return (\r\n        <div className={'cardItemVacancies'}>\r\n            <div className={'vacancy-inner'}>\r\n                <div className={'employer-logo'}>\r\n                    {props.employer.logo_urls ? <img src={props.employer.logo_urls[90]} alt={\"Company Logo\"} /> : 'No logo'}\r\n                </div>\r\n                <div className={'vacancy-name'}>\r\n                    Вакансия: <span className=\"vacancy-text\">{props.name}</span>\r\n                </div>\r\n                <div className={'employer-name'}>\r\n                    Компания: {props.employer.name}\r\n                </div>\r\n                <div className={'salary-min'}>\r\n                    Зарплата от: {props.salary && props.salary.from ? props.salary.from : '---'}\r\n                </div>\r\n                <div className={'salary-max'}>\r\n                    Зарплата до: {props.salary && props.salary.to ? props.salary.to : '---'}\r\n                </div>\r\n                <div className={'vacancy-city'}>\r\n                    Город: {props.address && props.address.city ? props.address.city : '---'}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ListItem;","import React, { Component } from 'react';\r\n// import logo from './logo.svg';\r\nimport './App.css';\r\nimport ListItem from './ListItem';\r\n\r\nclass App extends Component {\r\n\r\n    state = {\r\n        data: {\r\n            items: []\r\n        },\r\n        isListLoading: false\r\n    }\r\n\r\n    page = 0;\r\n\r\n    onListScroll = (e) => {\r\n        const SCROLLDIV = e.currentTarget;\r\n        console.log(`\r\n                Высота блока:${SCROLLDIV.clientHeight}\r\n                Высота контента:${SCROLLDIV.scrollHeight}\r\n                Насколько юзер проскроллил:${SCROLLDIV.scrollTop}\r\n                Высота блока + насколько юзер проскроллил:${SCROLLDIV.clientHeight + SCROLLDIV.scrollTop}\r\n                Сделать запрос, когда второе и четвёртое значения будут равны\r\n            `);\r\n\r\n        if (SCROLLDIV.scrollHeight <= SCROLLDIV.clientHeight + SCROLLDIV.scrollTop + 20) {\r\n            this.getDataFromAPI();\r\n        }\r\n    }\r\n\r\n    getDataFromAPI = () => {\r\n        if (!this.state.isListLoading) {\r\n            this.setState({isListLoading: true});\r\n            fetch( `https://api.hh.ru/vacancies?page=${this.page}&per_page=50` )\r\n                .then(res => res.json())\r\n                .then((result) => {\r\n                    console.log(result);\r\n                    this.setState({data: {\r\n                        items: this.state.data.items.concat(result.items)}\r\n                    })\r\n                    this.setState({isListLoading: false})\r\n                this.page++;\r\n            }).catch((err) => {\r\n                    console.error(err);\r\n                    alert('something wrong');\r\n                })\r\n            }\r\n        }\r\n\r\n    componentDidMount() {\r\n        this.getDataFromAPI();\r\n    }\r\n\r\n    render() {\r\n        if (!this.state.data) {\r\n            return <h1>Данных еще нет, загружаем...</h1>\r\n        }\r\n        return (\r\n        <div className=\"App\">\r\n            <header className=\"App-header\">\r\n                <h1 className=\"App-title\">React sample job parser</h1>\r\n            </header>\r\n            <div className=\"list_container\">\r\n                <div className={'list_wrapper'} onScroll={this.onListScroll}>\r\n                    {this.state.data.items.map( (item) => {\r\n                        return <ListItem key={item.id} {...item}/>\r\n                    } )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}